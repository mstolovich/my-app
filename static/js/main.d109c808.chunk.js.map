{"version":3,"sources":["components/GoogleMap/GoogleMap.js","App.js","serviceWorker.js","index.js"],"names":["GooglePddMap","withGoogleMap","props","defaultCenter","lat","lng","defaultZoom","position","App","useEffect","console","log","className","containerElement","style","height","width","mapElement","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uPAGaA,EAAeC,yBAAc,SAAAC,GAAK,OAC3C,kBAAC,YAAD,CACIC,cAAkB,CAAEC,IAAM,UAAWC,IAAM,WAC3CC,YAAgB,IAChB,kBAAC,SAAD,CACIC,SAAU,CAAEH,IAAK,UAAWC,IAAK,iB,OCiC9BG,MApCf,WAsBE,OADEC,qBAAU,kBAAMC,QAAQC,SAExB,6BACE,4BAAQC,UAAU,cAClB,gJAEA,mLACA,kBAACZ,EAAD,CACIa,iBAAoB,yBAAKC,MAAO,CAACC,OAAO,SAAWC,MAAO,YAC1DC,WAAc,yBAAKH,MAAO,CAACC,OAAQ,cCvBzBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.d109c808.chunk.js","sourcesContent":["import React from 'react';\r\nimport {withGoogleMap, GoogleMap, Marker} from \"react-google-maps\";\r\n\r\nexport const GooglePddMap = withGoogleMap(props => (\r\n    <GoogleMap\r\n        defaultCenter = { { lat : 48.464717, lng : 35.046183 } }\r\n        defaultZoom = { 10 }>\r\n        <Marker\r\n            position={{ lat: 48.434345, lng: 35.045201 }}\r\n        />\r\n    </GoogleMap>)\r\n)","import React, {useEffect} from 'react';\r\nimport { GooglePddMap } from './components/GoogleMap/GoogleMap'\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    /*let map;\r\n    const initMap = function() {\r\n        // eslint-disable-next-line no-undef\r\n        map = new google.maps.Map(document.getElementById('map'), {\r\n            center: {lat: -34.397, lng: 150.644},\r\n            zoom: 8\r\n        });    };\r\n    useEffect(() => {\r\n\r\n    const script = document.createElement(\"script\");\r\n    script.src = \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDbnY9AdWOe-qMJ7Y_o71mXRQTKrNxjgrY&callback=initMap\";\r\n    script.async = true;\r\n    script.defer = true;\r\n    //script.onload = () => this.scriptLoaded();\r\n\r\n\r\n    console.log(map)\r\n    console.log(map)\r\n    document.head.appendChild(script);\r\n  })*/\r\n    useEffect(() => console.log())\r\n  return (\r\n    <div >\r\n      <header className=\"App-header\">\r\n      <h1>Карта камер ПДД Днепр</h1>\r\n      </header>\r\n      <h3>Камеры наблюдения ПДД Днепр</h3>\r\n      <GooglePddMap\r\n          containerElement = {<div style={{height: `1000px`, width: '1000px' }}/>}\r\n          mapElement = {<div style={{height: '100%'}}/>}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}